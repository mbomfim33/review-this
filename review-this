#!/bin/bash

################################################################################
# review-this - Code review tool using Ollama
# 
# This script analyzes git changes (either unstaged or between branches) and 
# provides automated code review feedback using Ollama's AI models.
#
# Dependencies:
# - git
# - curl
# - jq
# - Ollama running locally with the codellama model
################################################################################

#===================================
# Configuration
#===================================
OLLAMA_MODEL="codellama"      # AI model to use for code review
TEMPERATURE=0.7               # Model temperature for response generation
REVIEW_FILE="review_results.json"  # Output file for review results
DEBUG=false                   # Debug mode flag

#===================================
# Command Line Argument Parsing
#===================================

# parse_args: Process command line arguments and set global configuration
# Usage: parse_args "$@"
# Parameters: Command line arguments array
parse_args() {
    COMPARE_MODE="current"    # Mode: 'current' for unstaged, 'branch' for branch comparison
    COMPARE_BRANCH="develop"  # Default branch to compare against
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --mode|-m)
                COMPARE_MODE="$2"
                shift 2
                ;;
            --branch|-b)
                COMPARE_BRANCH="$2"
                shift 2
                ;;
            --model|-ml)
                OLLAMA_MODEL="$2"
                shift 2
                ;;
            --temperature|-t)
                # Validate temperature is between 0 and 2
                if [[ "$2" =~ ^[0-9]*\.?[0-9]+$ ]] && (( $(echo "$2 >= 0" | bc -l) )) && (( $(echo "$2 <= 2" | bc -l) )); then
                    TEMPERATURE="$2"
                else
                    echo "Error: Temperature must be a number between 0 and 2"
                    exit 1
                fi
                shift 2
                ;;
            --debug|-d)
                DEBUG=true
                shift 1
                ;;
            --help|-h)
                echo "Usage: git-review [options]"
                echo "Options:"
                echo "  --mode, -m          Compare mode: 'current' (unstaged changes) or 'branch' (compare with branch)"
                echo "  --branch, -b        Branch to compare against (default: develop)"
                echo "  --model, -ml        Ollama model to use (default: codellama)"
                echo "  --temperature, -t   Model temperature (default: 0.7, range: 0-2)"
                echo "  --debug, -d         Enable debug output"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                exit 1
                ;;
        esac
    done
}

#===================================
# Logging Functions
#===================================

# debug_log: Output debug messages if debug mode is enabled
# Parameters:
#   $1: Message to log
#   $2: Component name (optional, defaults to MAIN)
debug_log() {
    if [ "$DEBUG" = true ]; then
        local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
        local component="${2:-MAIN}"
        local message="[$timestamp][$component] $1"
        echo "$message" >&2
        echo "$message" >> "$WORKING_DIR/git-review-debug.log"
    fi
}

#===================================
# Ollama Integration
#===================================

# check_ollama: Verify Ollama service is running
# Exits with error if Ollama is not accessible
check_ollama() {
    if ! curl -s http://localhost:11434/api/tags >/dev/null; then
        echo "Error: Ollama is not running. Please start Ollama first."
        exit 1
    fi
}

# query_ollama: Send code diff to Ollama for review
# Parameters:
#   $1: Git diff content to review
# Returns: AI-generated review comments or "N/A" if no issues found
query_ollama() {
    local diff="$1"
    local prompt="You are a code reviewer analyzing a git diff. You must follow these response rules exactly:

RESPONSE FORMAT:
1. If there are ANY issues (security, performance, best practices, or code quality): 
   - Respond with ONLY a bullet point list
   - Each bullet point should state the issue and its rationale
   - No introduction or conclusion text

2. If there are NO issues:
   - Respond with ONLY the exact text: N/A
   - No other text or explanation

Example good responses:
- For issues:
• useState dependency missing in useEffect - could cause stale closures
• Array index used as key - may cause rendering issues
• Inline styles reduce performance - should use CSS classes

- For no issues:
N/A

Here's the diff to review:\n\n$diff"
    
    debug_log "Querying Ollama (model: $OLLAMA_MODEL, temperature: $TEMPERATURE)"
    
    response=$(curl -s http://localhost:11434/api/generate -d "{
        \"model\": \"$OLLAMA_MODEL\",
        \"prompt\": $(echo "$prompt" | jq -R -s .),
        \"temperature\": $TEMPERATURE,
        \"stream\": false
    }" | jq -r '.response' || echo "Error querying Ollama")
    
    echo "$response"
}

#===================================
# Git Operations
#===================================

# get_changed_files: Get list of files to review based on comparison mode
# Returns: List of file paths, one per line
get_changed_files() {
    cd "$WORKING_DIR" || exit 1
    debug_log "Getting changed files in: $WORKING_DIR (mode: $COMPARE_MODE)"
    
    if [ "$COMPARE_MODE" = "current" ]; then
        # Add all new files to git's index (without staging them)
        git add -N .
        
        # Get both modified and untracked files
        git status --porcelain \
        | grep -E '^[MARC? ][ MARC?] ' \
        | sed 's/^...//'
    else
        # Compare with specified branch
        git diff --name-only "$COMPARE_BRANCH"...HEAD
    fi | grep -v -E '(package-lock.json|yarn.lock|pnpm-lock.yaml|Gemfile.lock|poetry.lock|review_results.json|review_results.md|.gitignore)$' | \
        while read -r file; do
            if [ -f "$file" ] && ! git check-ignore -q "$file"; then
                debug_log "Found file to review: $file"
                echo "$file"
            fi
        done
}

# get_file_diff: Generate git diff for a specific file
# Parameters:
#   $1: File path to get diff for
# Returns: Git diff output or generated diff for new files
get_file_diff() {
    local file="$1"
    cd "$WORKING_DIR" || exit 1
    debug_log "Getting diff for file: $file"
    
    if [ "$COMPARE_MODE" = "current" ]; then
        if git ls-files --error-unmatch "$file" >/dev/null 2>&1; then
            # File is tracked, get normal diff
            git diff "$file"
        else
            # File is untracked, show entire file as new
            echo "diff --git a/$file b/$file"
            echo "new file mode 100644"
            echo "--- /dev/null"
            echo "+++ b/$file"
            echo "@@ -0,0 +1,$(wc -l < "$file") @@"
            sed 's/^/+/' "$file"
        fi
    else
        git diff "$COMPARE_BRANCH"...HEAD -- "$file"
    fi
}

#===================================
# Report Generation
#===================================

# generate_markdown: Convert JSON results to markdown format
# Parameters:
#   $1: Path to JSON file containing review results
generate_markdown() {
    local json_file="$1"
    local markdown_file="${json_file%.json}.md"
    
    local prompt="Convert this JSON code review report into a well-formatted markdown document. 
    Include file names as headers. 
    Format code-related terms with backticks.
    Here's the JSON:\n\n$(cat "$json_file")"
    
    debug_log "Generating markdown report"
    
    curl -s http://localhost:11434/api/generate -d "{
        \"model\": \"$OLLAMA_MODEL\",
        \"prompt\": $(echo "$prompt" | jq -R -s .),
        \"stream\": false
    }" | jq -r '.response' > "$markdown_file"
    
    echo "Markdown report generated: $markdown_file"
}

#===================================
# Main Execution
#===================================

# main: Primary execution flow
# Parameters:
#   Command line arguments array
main() {
    # Parse command line arguments
    parse_args "$@"
    
    # Store working directory
    local original_dir="$PWD"
    WORKING_DIR="$(pwd)"
    
    # Validate environment
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "Error: Not in a git repository"
        exit 1
    fi
    
    # Check dependencies
    for cmd in curl jq git; do
        if ! command -v "$cmd" >/dev/null; then
            echo "Error: Required command '$cmd' is not installed"
            exit 1
        fi
    done
    
    check_ollama
    
    # Initialize results file
    echo "[]" > "$REVIEW_FILE"
    
    # Process each changed file
    while IFS= read -r file; do
        if [ -n "$file" ]; then
            echo "Reviewing: $file"
            
            diff=$(get_file_diff "$file")
            
            if [ -n "$diff" ]; then
                review=$(query_ollama "$diff")
                
                # Add review to JSON results
                jq --arg file "$file" \
                   --arg review "$review" \
                   --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                   '. += [{
                       "file": $file,
                       "review": $review,
                       "timestamp": $timestamp
                   }]' "$REVIEW_FILE" > temp.json && mv temp.json "$REVIEW_FILE"
            fi
        fi
    done < <(get_changed_files)
    
    # Generate final report
    generate_markdown "$REVIEW_FILE"
    
    # Restore original directory
    cd "$original_dir" || exit 1
}

# Start execution
main "$@"
